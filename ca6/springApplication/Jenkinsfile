pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                echo 'Pulling the latest source code from the development branch'
                checkout scm
            }
        }

        stage('Assemble') {
            steps {
                dir('ca6/springApplication') {
                    echo 'Making gradlew executable'
                    sh 'chmod +x gradlew' // Add this line to make gradlew executable

                    echo 'Compiling the code and building artifact files'
                    sh './gradlew clean build -x test'
                }
            }
        }

        stage('Test') {
            steps {
                dir('ca6/springApplication') {
                    echo 'Making gradlew executable'
                    sh 'chmod +x gradlew' // Ensure this step is repeated in case of separate environments

                    echo 'Running unit tests to verify the applicationâ€™s correctness'
                    sh './gradlew test'

                    echo 'Publishing test results in Jenkins'
                    junit '**/build/test-results/test/*.xml'
                }
            }
        }

        stage('Archive') {
            steps {
                dir('ca6/springApplication') {
                    echo 'Archiving the built artifacts'
                    archiveArtifacts artifacts: 'app/build/libs/*.jar', allowEmptyArchive: false
                }
            }
        }

        stage('Tag Stable Build') {
            when {
                expression {
                    currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                script {
                    def version = "stable-v1.${BUILD_NUMBER}"
                    echo "Tagging the build as ${version}"

                    dir('ca6/springApplication') {
                        // Use withCredentials to securely pass SSH private key
                        withCredentials([sshUserPrivateKey(credentialsId: 'github-creds-ssh', keyFileVariable: 'SSH_KEY')]) {
                            // Add the SSH key to the ssh-agent for the current session
                            sh """
                                eval \$(ssh-agent -s)
                                ssh-add ${SSH_KEY}


                                git config user.name "Jenkins CI"
                                git config user.email "jenkins@example.com"
                                git tag -a ${version} -m "Stable build ${version}"
                                git push git@github.com:ruben1191018/cogsi-1190914-1191018-1191042.git ${version}
                            """
                        }
                    }
                }
            }
        }


        stage('Deploy to Production?') {
            steps {
                script {
                    echo 'Requesting manual approval for deployment to production'
                    timeout(time: 30, unit: 'MINUTES') {
                        input message: 'Do you approve the deployment to production?', ok: 'Proceed'
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                dir('ca6/springApplication') {
                    echo 'Deploying the application using Ansible playbook'
                    sh 'ansible-playbook -i inventory/hosts deploy.yml --extra-vars "target=green_vm"'
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed'
        }
        success {
            echo 'Pipeline succeeded'
        }
        failure {
            echo 'Pipeline failed'
        }
    }
}
