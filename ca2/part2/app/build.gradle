/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation libs.guava
    // Spring Boot Web Starter
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Spring Boot Data JPA Starter
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Spring Boot HATEOAS Starter
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'

    // H2 Database (runtime only)
    runtimeOnly 'com.h2database:h2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'payroll.PayrollApplication'
}


task backupSource(type: Zip) {
    group = "Backup"
    description = "Zips the entire source code and stores it in a backup directory."

    from 'src'
    include '**/*'

    destinationDirectory = file("backups")

    archiveFileName = "source-backup-${new Date().format('yyyy-MM-dd_HH-mm-ss')}.zip"

    doFirst {
        println "Cleaning backup directory and preparing for zipping the source code..."
        delete file("backups")
        mkdir file("backups")
    }

    doLast {
        println "Source code successfully backed up and stored in ${destinationDirectory.get().asFile.absolutePath}"
    }
}

task runDistApp(type: Exec){
    group = "Application"
    description = "Runs the application using the generated distribution scripts."

    dependsOn installDist

    def os = org.gradle.internal.os.OperatingSystem.current()

    def appDir = "$buildDir/install/${project.name}/bin"
    def execScript

    if (os.isWindows()) {
        execScript = "${appDir}/${project.name}.bat"
    } else {
        execScript = "${appDir}/${project.name}"
    }

    println "Running the application using: $execScript"

    executable = execScript
}

task packageJavadoc(type: Zip) {
    group = "Documentation"
    description = "Generates Javadoc and packages it into a ZIP file."

    dependsOn javadoc

    from javadoc.destinationDir

    destinationDirectory = file("$rootDir/app")

    archiveFileName = "javadoc.zip"

    doLast {
        println "Javadoc has been generated and packaged into $destinationDirectory/javadoc.zip"
    }
}
